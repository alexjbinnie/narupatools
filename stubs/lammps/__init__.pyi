from ctypes import CDLL, c_void_p
from types import TracebackType
from typing import Any, Dict, List, Optional, Type, Union

import numpy as np

LAMMPS_INT: int
LAMMPS_INT_2D: int
LAMMPS_DOUBLE: int
LAMMPS_DOUBLE_2D: int
LAMMPS_INT64: int
LAMMPS_INT64_2D: int
LAMMPS_STRING: int

LMP_VAR_EQUAL: int
LMP_VAR_ATOM: int

LMP_SIZE_ROWS: int
LMP_SIZE_COLS: int

class System:
    @property
    def units(self) -> str: ...

class OutputCapture:
    def __enter__(self) -> OutputCapture: ...
    def __exit__(
        self,
        t: Optional[Type[BaseException]] = ...,
        value: Optional[BaseException] = ...,
        traceback: Optional[TracebackType] = ...,
    ) -> bool: ...
    @property
    def output(self) -> str: ...

class lammps:
    def extract_compute(self, id: str, style: int, type: int) -> Any: ...
    def extract_setting(self, name: str) -> int: ...
    def extract_global_datatype(self, name: str) -> int: ...
    def extract_atom_datatype(self, name: str) -> int: ...
    def extract_fix(
        self, id: str, style: int, type: int, nrow: int = ..., ncol: int = ...
    ) -> Any: ...
    def get_thermo(self, name: str) -> Optional[float]: ...
    def extract_global(self, name: str, dtype: int) -> Union[None, str, int, float]: ...
    def gather_atoms(self, name: str, type: int, count: int) -> Any: ...
    def get_natoms(self) -> int: ...
    def scatter_atoms(self, name: str, type: int, count: int, data: Any) -> None: ...
    def has_id(self, category: str, name: str) -> bool: ...
    def has_style(self, category: str, name: str) -> bool: ...
    def version(self) -> int: ...
    @property
    def numpy(self) -> numpy_wrapper: ...
    @property
    def installed_packages(self) -> List[str]: ...
    @property
    def lmp(self) -> c_void_p: ...
    @property
    def lib(self) -> CDLL: ...
    def close(self) -> None: ...
    def available_styles(self, category: str) -> List[str]: ...

class PyLammps:
    enable_cmd_history: bool

    _cmd_history: List[str]
    @property
    def system(self) -> System: ...
    @property
    def lmp(self) -> lammps: ...
    def command(self, command: str) -> None: ...
    def run(self, steps: int) -> None: ...
    def file(self, filename: str) -> None: ...
    def units(self, units: str) -> None: ...
    def atom_modify(self, keywords: str) -> None: ...
    @property
    def computes(self) -> List[Dict[str, str]]: ...
    def info(self, type: str) -> List[str]: ...
    def eval(self, expression: str) -> Any: ...
    def close(self) -> None: ...

class numpy_wrapper:
    def extract_compute(
        self, cid: str, style: int, type: int
    ) -> Union[float, np.ndarray, None]: ...
    def extract_variable(
        self,
        name: str,
        group: Optional[str] = ...,
        vartype: int = ...,
    ) -> Union[float, np.ndarray]: ...
    def extract_atom(self, name: str) -> Any: ...
