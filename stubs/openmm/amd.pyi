from openmm import CustomIntegrator

class AMDIntegrator(CustomIntegrator):
    def __init__(self, dt: float, alpha, E) -> None: ...
    def getAlpha(self) -> None: ...
    def getE(self) -> None: ...
    def getEffectiveEnergy(self, energy) -> None: ...
    def setAlpha(self, alpha) -> None: ...
    def setE(self, E) -> None: ...

class AMDForceGroupIntegrator(CustomIntegrator):
    def __init__(self, dt: float, group, alphaGroup, EGroup) -> None: ...
    def getAlphaGroup(self) -> None: ...
    def getEGroup(self) -> None: ...
    def getEffectiveEnergy(self, groupEnergy: float) -> float: ...
    def setAlphaGroup(self, alpha) -> None: ...
    def setEGroup(self, E) -> None: ...

class DualAMDIntegrator(CustomIntegrator):
    def __init__(
        self, dt: float, group, alphaTotal, ETotal, alphaGroup, EGroup
    ) -> None: ...
    def getAlphaGroup(self) -> None: ...
    def getAlphaTotal(self) -> None: ...
    def getEGroup(self) -> None: ...
    def getETotal(self) -> None: ...
    def getEffectiveEnergy(self, totalEnergy: float, groupEnergy) -> float: ...
    def setAlphaGroup(self, alpha) -> None: ...
    def setAlphaTotal(self, alpha) -> None: ...
    def setEGroup(self, E) -> None: ...
    def setETotal(self, E) -> None: ...
